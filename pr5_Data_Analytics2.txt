import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from math import exp

data=pd.read_csv("Social_Network_Ads.csv")
data.head()

data.describe()

plt.scatter(data['Age'],data['Purchased'])
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()
X_train,X_test,Y_train,Y_test=train_test_split(data['Age'],data['Purchased'],test_size=0.20)


from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(X_train.values.reshape(-1,1),Y_train.values.reshape(-1,1).ravel())
#making predictions
y_pred_sk=model.predict(X_test.values.reshape(-1,1))
plt.clf()
plt.scatter(X_test,Y_test)
plt.scatter(X_test,y_pred_sk,c="red")
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()
print(f'Accuracy={model.score((X_test.values.reshape(-1,1)),Y_test.values.reshape(-1,1))}')

from sklearn.metrics import confusion_matrix
tn,fp,fn,tp=confusion_matrix(Y_test,y_pred_sk).ravel()
print("True Nagative ",tn)
print("False Positive ",fp)
print("False Nagative ",fn)
print("True Positive ",tp)


Accuracy=(tn+tp)*100/(tn+fp+fn+tp)
print("Accuracy {:,.2f}%".format(Accuracy))

Precision=tp/(tp+fp)
print("Precision = {:,.2f}".format(Precision))

Recall=tp/(tp+fn)
print("Recall = {:,.2f}".format(Recall))

Error = (fp + fn)/(tp + tn + fn + fp)
print("Error rate {:0.2f}".format(Error))


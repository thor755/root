import nltk
nltk.download('punkt')

from nltk.tokenize import sent_tokenize

text="""Hello Mr. Smith, how are you doing today? The weather is
great, and city is awesome. The sky is pinkish-blue. You shouldn't
eat cardboard"""
tokenized_text=sent_tokenize(text)
print(tokenized_text)

from nltk.tokenize import word_tokenize
tokenize_word=word_tokenize(text)
print(tokenize_word)

from nltk.probability import FreqDist
fdist=FreqDist(tokenize_word)
print(fdist)

fdist.most_common(2)

import matplotlib.pyplot as plt
fdist.plot(30,cumulative=False)
plt.show()

sent = "Albert Einstein was born in Ulm, Germany in 1879."
tokens=nltk.word_tokenize(sent)
print(tokens)


nltk.download('averaged_perceptron_tagger')

nltk.pos_tag(tokens)

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
stop_words=set(stopwords.words("english")) 
print(stop_words)

filtered_sent=[]
for w in tokenize_word:
    if w not in stop_words:
        filtered_sent.append(w)
print("Tokenized Sentence:",tokenize_word)
print('\n')
print("Filterd Sentence:",filtered_sent)

from nltk.stem import PorterStemmer
from nltk.tokenize import sent_tokenize, word_tokenize
ps = PorterStemmer()
stemmed_words=[]
for w in filtered_sent:
 stemmed_words.append(ps.stem(w))
print("Filtered Sentence:",filtered_sent)
print('\n')
print("Stemmed Sentence:",stemmed_words)

import nltk
nltk.download('wordnet')

from nltk.stem.wordnet import WordNetLemmatizer
lem = WordNetLemmatizer()
from nltk.stem.porter import PorterStemmer
stem = PorterStemmer()
word = "flying"
print("Lemmatized Word:",lem.lemmatize(word,"v")) 
print('\n')
print("Stemmed Word:",stem.stem(word))


import pandas as pd
import sklearn as sk
import math
first_sentence = "Data Science is the sexiest job of the 21st century"
second_sentence = "machine learning is the key for data science"
first_sentence= first_sentence.split(" ")
second_sentence = second_sentence.split(" ")
total=set(first_sentence).union(set(second_sentence))
print(total)

wordDictA = dict.fromkeys(total, 0)
wordDictB = dict.fromkeys(total, 0)
for word in first_sentence:
 wordDictA[word]+=1

for word in second_sentence:
 wordDictB[word]+=1
pd.DataFrame([wordDictA, wordDictB])


def computeTF(wordDict, doc):
 tfDict = {}
 corpusCount = len(doc)
 for word, count in wordDict.items():
     tfDict[word] = count/float(corpusCount)
 return(tfDict)                                          #running our sentences through the tf function:
tfFirst = computeTF(wordDictA, first_sentence)
tfSecond = computeTF(wordDictB, second_sentence)                        #Converting to dataframe for visualization
tf=pd.DataFrame([tfFirst,tfSecond])
print(tf)

from nltk.corpus import stopwords
stop_words =set(stopwords.words('english'))
filtered_sentence = [w for w in wordDictA if not w in stop_words]
print(filtered_sentence)

def computeIDF(docList):
    idfDict = {}
    N = len(docList)
    idfDict = dict.fromkeys(docList[0].keys(), 0)
    for word, val in idfDict.items():
        idfDict[word] = math.log10(N / (float(val) + 1))
    return(idfDict) 


#inputing our sentences in the log file
idfs = computeIDF([wordDictA, wordDictB])
print(idfs)


def computeTFIDF(tfBow, idfs):
    tfidf = {}
    for word, val in tfBow.items():
        tfidf[word] = val*idfs[word]
    return(tfidf)
#running our two sentences through the IDF:
idfFirst =computeTFIDF(tfFirst, idfs)
idfSecond = computeTFIDF(tfSecond, idfs)
#putting it in a dataframe
idf= pd.DataFrame([idfFirst, idfSecond])
print(idf)


from sklearn.feature_extraction.text import TfidfVectorizer
firstV= "Data Science is the sexiest job of the 21st century" 
secondV= "machine learning is the key for data science"
vectorize= TfidfVectorizer()
response= vectorize.fit_transform([firstV, secondV])
print(response)



